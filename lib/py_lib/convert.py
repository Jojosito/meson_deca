# Contains small helpful converter functions

import numpy as np

def ComplexVectorForm(vector_like_var):
    """
    Returns a complex vector from an object generated by boost::python's 
    extended_vector_suite.

    Beware: does not check whether vector_like_var contains an even 
    number of entries.
    """
    vector_var = np.asarray([vector_like_var[2*i] + \
                             1j * vector_like_var[2*i + 1]\
                            for i in range(vector_like_var.__len__()/2)])
    return vector_var


def MatrixForm(vector_like_var):
    """
    Returns a matrix from an object generated by boost::python's 
    extended_vector_suite.

    Beware: does not check whether vector_like_var contains an even 
    number of entries.
    """
    vector_var = np.asarray([vector_like_var[i] \
                            for i in range(vector_like_var.__len__())])
    return np.reshape(vector_var, (2, vector_like_var.__len__()/2), order='F')



